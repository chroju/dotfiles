"---------------------------
" encoding
"---------------------------
" http://rbtnn.hateblo.jp/entry/2014/11/30/174749
set encoding=utf-8
scriptencoding utf-8
" 保存ファイルエンコード設定
set fileencoding=utf-8
" ファイルの文字コード自動判別設定
set fileencodings=ucs-bom,utf-8,cp932,sjis,euc-jp,iso-2022-jp
" 改行コード設定
set fileformat=unix
set fileformats=unix,dos,mac


"---------------------------
" Common
"---------------------------
" reset autocmd
augroup vimrc
  autocmd!
augroup END

set number " 行数表示
set notitle " 変なタイトル表示しない
set nobackup " バックアップファイルを作成しない
set noswapfile " スワップファイルを作成しない
set hidden " 未保存バッファがあっても無視する
set clipboard+=unnamed,autoselect  " クリップボードをOSと連携
set showcmd " 入力中のコマンドを右下に表示
set ruler " 座標を右下に表示
set scrolloff=3 " スクロール時の余白確保
set textwidth=0 " 自動折り返しをしない
set noerrorbells " エラー時にビープ音を鳴らさない
set vb t_vb= " ビープ音をビジュアルベル（空文字）に置き換え
set novisualbell "ビジュアルベルを表示しない
set ambiwidth=double " マルチバイト文字のズレを防ぐ
set laststatus=2
" 以下3行、矢印キーによるアルファベット入力防止
set notimeout
set ttimeout
set timeoutlen=100
set noundofile " .un~ファイルを生成しない
set helplang=ja,en
set nrformats= " 語頭0の数値も10進数として扱う
set foldlevel=99
" デフォルト設定のtxtファイルのtextwidthを上書き
autocmd vimrc FileType text setlocal textwidth=0


"---------------------------
" Visual
"---------------------------
"カラースキーム設定
highlight Normal ctermbg=none
syntax enable

" 256色で使用する
set t_Co=256

" カーソルラインのハイライト
set cursorline
" カレントウィンドウのみに罫線を引く
augroup vimrc
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END
highlight clear CursorLine
highlight CursorLine ctermbg=17 guibg=black
" カーソルライン設定ここまで

" set spellによるスペルチェックに下線を引く
highlight SpellBad cterm=underline ctermbg=0


"---------------------------
" Search
"---------------------------
set incsearch "インクリメンタルサーチを行う
set hlsearch  "検索結果をハイライトする
set ignorecase  "検索時に文字の大小を区別しない
set smartcase "検索時に大文字を含んでいたら大小を区別する
set wrapscan  "検索をファイルの先頭へループする

"Escの2回押しでハイライト消去
nnoremap <ESC><ESC>  :nohlsearch<CR>


"---------------------------
" input assist
"---------------------------
" オートインデント
set autoindent
" 不可視文字の表示
set list
set listchars=tab:^.,trail:-
" 行頭、行末をすっ飛ばしてカーソル移動
set whichwrap=b,s,h,l,<,>,[,]
"閉じ括弧が入力されたとき、対応する括弧をmatchtime秒表示
set showmatch
set matchtime=3
"新しい行を作ったときに高度な自動インデントを行う
set smartindent
"行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする。
set expandtab
set shiftwidth=2
"ファイル内の <Tab> が対応する空白の数
set tabstop=2
"長い行も最後まで表示する
set display=lastline
" 括弧の補完
inoremap ( ()<Left>
inoremap " ""<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap ' ''<Left>
inoremap < <><Left>


"---------------------------
" Complete
"---------------------------
set wildmenu "コマンド補完を強化
set wildmode=list:full "リスト表示，最長マッチ
set history=1000 " コマンド・検索パターンの履歴数
set dict=/usr/share/dict/words
set complete+=k " 補完に辞書ファイル追加
set completeopt-=preview


"---------------------------
" Key mapping
"---------------------------
" common
nnoremap ,, :up<CR>
nnoremap <Space>,, :w<Space>!sudo<Space>tee<Space>>/dev/null<Space>%
nnoremap <C-h> :<C-u>help<Space>
nnoremap <Space>l $
nnoremap <Space>h ^
vnoremap <Space>l $
vnoremap <Space>h ^
nnoremap Y y$

" インクリメント＆デクリメント
nnoremap + <C-a>
nnoremap - <C-p>

" タブ操作
nnoremap tc :<C-u>tabnew<CR>
nnoremap tx :<C-u>tabclose<CR>

" 行移動
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap j gj
vnoremap k gk
vnoremap gj j
vnoremap gk k

" buffer
nnoremap bb :ls<CR>:buf

" ctags
" http://qiita.com/ykyk1218/items/ab1c89c4eb6a2f90333a
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>

" 編集中のファイルのディレクトリに移動
nnoremap ,d :execute ":lcd" . expand("%:p:h")<CR>

" easy open vimrc
if has("win64")
  let vimrcbody = '$HOME/_vimrc'
else
  let vimrcbody = '$HOME/.vim/vimrc'
endif

function! OpenFile(file)
    let empty_buffer = 
\        line('$') == 1 && strlen(getline('1')) == 0
    if empty_buffer && !&modified
        execute 'e ' . a:file
    else
        execute 'tabnew ' . a:file
    endif
endfunction

command! OpenMyVimrc call OpenFile(vimrcbody)
nnoremap <Space><Space> :<C-u>OpenMyVimrc<CR>

" easy reload .vimrc
function! SourceIfExists(file)
    if filereadable(expand(a:file))
        execute 'source ' . a:file
    endif
    echo 'Reloaded vimrc.'
endfunction

nnoremap <F5> <Esc>:<C-u>source $MYVIMRC<CR>
\ :source $MYVIMRC<CR>
\ :call SourceIfExists('~/vimfiles/ftplugin/' . &filetype . '.vim')<CR>


" %移動設定
if !exists('loaded_matchit')
  runtime macros/matchit.vim
endif


"---------------------------
" plugins (dein.vim)
"---------------------------
" http://qiita.com/delphinus35/items/00ff2c0ba972c6e41542
" プラグインのインストールディレクトリ
let s:dein_dir = expand('~/.vim/bundle')
" dein.vimのインストールディレクトリ
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vimが存在しない場合はインストール
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  call dein#load_toml('~/.vim/rc/dein.toml', {'lazy': 0})
  call dein#load_toml('~/.vim/rc/deinlazy.toml', {'lazy' : 1})

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#update()
endif


