[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'arcticicestudio/nord-vim'
hook_add = 'colorscheme nord'

[[plugins]]
repo = 'fatih/vim-go'

[[plugins]]
repo = 'cocopon/vaffle.vim'
hook_add = '''
let g:vaffle_show_hidden_files = 1
nnoremap ,f :<C-u>Vaffle<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'tomtom/tcomment_vim.git'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "has('lua')"
hook_add = '''
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 2
" prevent completefunc conflicts
let g:neocomplete#force_overwrite_completefunc = 1

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : ''
    \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif

let g:neocomplete#keyword_patterns._ = '\h\w*'


if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
" <TAB> setting is later, in NeoSnippets settings
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> pumvisible() ? neocomplete#smart_close_popup()."\<C-h>" : "\<C-h>"
inoremap <expr><BS> pumvisible() ? neocomplete#smart_close_popup()."\<C-h>" : "\<C-h>"
inoremap <expr><C-q> pumvisible() ? neocomplete#close_popup() : "\<C-q>"
inoremap <expr><C-e> pumvisible() ? neocomplete#cancel_popup() : "\<C-e>"

" Enable omni completion.
autocmd vimrc FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd vimrc FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd vimrc FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd vimrc FileType python setlocal omnifunc=jedi#completions
autocmd vimrc FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd vimrc FileType ruby setlocal omnifunc=rubycomplete#CompleteRuby
autocmd vimrc BufWritePost *.py call Flake8()
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if = "has('lua')"
hook_add = '''
" snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets,~/.vim/mysnippets'

" Plugin Keymap
imap <C-k>  <Plug>(neosnippet_expand_or_jump)
smap <C-k>  <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'currentdir' ],
      \             [ 'fugitive', 'filename', 'readonly', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"\u2b64":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
      \ },
      \ 'component_function': {
      \   'currentdir': 'MyCurrentDir',
      \ },
      \ 'separator': { 'left': "", 'right': "" },
      \ 'subseparator': { 'left': "|", 'right': "|" },
      \}

function! MyCurrentDir()
  return fnamemodify(getcwd(), ":p:~")
endfunction
'''

[[plugins]]
repo = 'groenewege/vim-less'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
" memolist directory path
let g:memolist_path = "$HOME/Dropbox/notes"
" use template
let g:memolist_template_dir_path = "$HOME/.vim/templates/memolist.txt"
" suffix type (default markdown)
let g:memolist_memo_suffix = "md"
" date format (default %Y-%m-%d %H:%M)
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
" use qfixgrep (default 0)
let g:memolist_qfixgrep = 1
" use unite (default 0)
let g:memolist_unite = 1
let g:memolist_unite_source = "file_rec"
let g:memolist_unite_option = "-auto-preview -start-insert"
nnoremap ,mn  :MemoNew<CR>
nnoremap ,ml  :MemoList<CR>
nnoremap ,mg  :MemoGrep<Space>
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'jacquesbh/vim-showmarks'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'glidenote/serverspec-snippets'

[[plugins]]
repo = 'lambdalisue/vim-gista'

[[plugins]]
repo = 'davidhalter/jedi-vim'

[[plugins]]
repo = 'nvie/vim-flake8'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = 'nnoremap ! :Switch<CR>'

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
let g:auto_ctags = 1
let g:auto_ctags_directory_list = ['.git']
set tags+=.git/tags
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_setColors = 0
let g:indentLine_char = '.'
let g:indentLine_setColors = 0
let g:indentLine_setConceal = 0
'''
